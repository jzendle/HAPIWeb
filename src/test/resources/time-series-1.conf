[defaults]
api.source:      hiper_api
api.source.beta: hiper_secondary
api.cache:       300

[read:doc]
Obtain packet size as a time-series for a service.

:domain     - The network domain name.
              Default - 'tw telecom - public'.

:service    - The circuit identifier for the service.

:minimum    - The minimum time stamp to include data for.
              Default: current epoch time - #secs in a day.
:maximum    - The maximum time stamp to include data for.
              Default: current epoch time.

:resolution - The time resolution to use as a data source. 
              Valid values are: 5m, 1h, 8h, and 1d.

:interval   - The data points interval in multiples of
              mins(m)/hrs(h)/days(d).
              e.g.; 5m, 15m, 1h, 4h, 1d etc.

[read:test]
service=80/KGFN/100510/TWCS&resolution=5m&interval=15m

[read]
SELECT
	d.stamp    AS stamp,
	DECODE(
      (SUM(d.tx) = 0) AND (count(d.tx) = 1), 
      TRUE, 
		0,
		ROUND(SUM(d.tx), 3)
   )               AS tx,
   DECODE(
   	(SUM(d.rx) = 0) AND (count(d.rx) = 1),
   	TRUE, 
		0,
		ROUND(SUM(d.rx), 3)
   )               AS rx
FROM
(
	(
	   SELECT
	      EXTRACT(EPOCH FROM (ts AT TIMEZONE 'UTC'))::INT AS stamp,
	      0                             AS tx,
	      0                             AS rx
	   FROM
	   (
	      SELECT TO_TIMESTAMP_TZ( #bind_default ( $minimum '-86400' 'time' ) ) AT TIMEZONE 'UTC'  AS tstamp
	      UNION
	      SELECT TO_TIMESTAMP_TZ( #bind_default ( $maximum '0' 'time' ) ) AT TIMEZONE 'UTC'       AS tstamp
	   ) as expected_hours
	   TIMESERIES ts AS '#transform ( $interval 'duration' ) seconds' OVER (ORDER BY tstamp)
	) 
	UNION
	(
		SELECT
			d.stamp                 AS stamp,
			AVG(d.tx)               AS tx,
			AVG(d.rx)               AS rx
		FROM
		(
			SELECT
				CEILING(
					m.stamp/ #transform ( $interval 'duration' )
				) * m.stamp/ #transform ( $interval 'duration' )
	                                 AS stamp,
				m.bit_tx/n.packet_tx    AS tx,
				m.bit_rx/n.packet_rx    AS rx
			FROM
			(
				SELECT
					d.stamp         AS stamp,
					d.snmp_instance AS snmp_instance,
					MAX(
						DECODE(
							c.metric, 
							'Bits / Second - TX',
							d.value
						)
					)               AS bit_tx,
					MAX(
						DECODE(
							c.metric, 
							'Bits / Second - RX',
							d.value
						)
					)               AS bit_rx
				FROM
					npm_dba.circuit_meta            c,
					npm_dba.snmp_data_$resolution d
				WHERE
					c.metric             IN (
						'Bits / Second - TX',
						'Bits / Second - RX'
					)
				AND
					c.domain              = lower(  #bind_default ( $domain 'tw telecom - public' ) )
				AND
					c.circuit_identifier  = upper( #bind ( $service ) )
				AND
					c.snmp_object                = d.snmp_object
				AND
					c.snmp_instance              = d.snmp_instance
				AND
					c.min_stamp                 <= d.stamp
				AND
					c.max_stamp                 >= d.stamp
				AND
					d.stamp                     >=  #bind_default ( $minimum '-86400' 'time')
				AND
					d.stamp                     <= #bind_default ( $maximum '0' 'time')
				GROUP BY
					d.snmp_instance, d.stamp
				ORDER BY
					d.stamp
				) m LEFT JOIN
				(
					SELECT
						d.stamp         AS stamp,
						d.snmp_instance AS snmp_instance,
						SUM(
							DECODE(
								REGEXP_LIKE(c.metric, 'Packets / Second - TX'), 
								TRUE,
								d.value
							)
						)               AS packet_tx,
						SUM(
							DECODE(
								REGEXP_LIKE(c.metric, 'Packets / Second - RX'), 
								TRUE,
								d.value
							)
						)               AS packet_rx
					FROM
						npm_dba.circuit_meta            c
					JOIN
						npm_dba.snmp_data_$resolution d
					ON
					(
							c.metric             IN (
								'Unicast Packets / Second - TX',
								'Unicast Packets / Second - RX',
								'Multicast Packets / Second - TX',
								'Multicast Packets / Second - RX',
								'Broadcast Packets / Second - TX',
								'Broadcast Packets / Second - RX'
							)
						AND
							c.domain              = lower( #bind_default ( $domain 'tw telecom - public' 'string' ) )
						AND
							c.circuit_identifier  = upper( #bind ( $service ) )
						AND
							c.snmp_object                = d.snmp_object
						AND
							c.snmp_instance              = d.snmp_instance
						AND
							d.stamp                     >= #bind_default ( $minimum '-86400' 'time' )
						AND
							d.stamp                     <= #bind_default ( $maximum '0' 'time' )
						AND
							c.min_stamp                 <= d.stamp
						AND
							c.max_stamp                 >= d.stamp
					)
					GROUP BY
						d.snmp_instance, d.stamp
					ORDER BY
						d.stamp
				) n ON ( 
						m.snmp_instance = n.snmp_instance
					AND
		  				m.stamp         = n.stamp
				)
			WHERE
				n.packet_rx IS NOT NULL
			AND
				n.packet_tx IS NOT NULL
			AND 
				n.packet_rx != 0
			AND
				n.packet_tx != 0
		) d
		GROUP BY
			d.stamp
		ORDER BY
			d.stamp 
	)
	ORDER BY
		stamp
) d
WHERE
	d.stamp                     >= #bind_default ( $minimum '-86400' 'time' )
AND
	d.stamp                     <= #bind_default ( $maximum '0' 'time' )
GROUP BY 
	d.stamp
ORDER BY
	d.stamp

#
# vim: noet ts=3 sw=3
# vim: syntax=sql
#
